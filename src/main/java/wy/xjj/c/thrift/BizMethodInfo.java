/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package wy.xjj.c.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class BizMethodInfo implements org.apache.thrift.TBase<BizMethodInfo, BizMethodInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BizMethodInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BizMethodInfo");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ARGS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("argsNum", org.apache.thrift.protocol.TType.BYTE, (short)2);
  private static final org.apache.thrift.protocol.TField ARGS_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("argsType", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BizMethodInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BizMethodInfoTupleSchemeFactory());
  }

  public String name; // required
  public byte argsNum; // required
  public List<String> argsType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    ARGS_NUM((short)2, "argsNum"),
    ARGS_TYPE((short)3, "argsType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // ARGS_NUM
          return ARGS_NUM;
        case 3: // ARGS_TYPE
          return ARGS_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ARGSNUM_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ARGS_NUM, new org.apache.thrift.meta_data.FieldMetaData("argsNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.ARGS_TYPE, new org.apache.thrift.meta_data.FieldMetaData("argsType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BizMethodInfo.class, metaDataMap);
  }

  public BizMethodInfo() {
  }

  public BizMethodInfo(
    String name,
    byte argsNum,
    List<String> argsType)
  {
    this();
    this.name = name;
    this.argsNum = argsNum;
    setArgsNumIsSet(true);
    this.argsType = argsType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BizMethodInfo(BizMethodInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.argsNum = other.argsNum;
    if (other.isSetArgsType()) {
      List<String> __this__argsType = new ArrayList<String>(other.argsType);
      this.argsType = __this__argsType;
    }
  }

  public BizMethodInfo deepCopy() {
    return new BizMethodInfo(this);
  }

  @Override
  public void clear() {
    this.name = null;
    setArgsNumIsSet(false);
    this.argsNum = 0;
    this.argsType = null;
  }

  public String getName() {
    return this.name;
  }

  public BizMethodInfo setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public byte getArgsNum() {
    return this.argsNum;
  }

  public BizMethodInfo setArgsNum(byte argsNum) {
    this.argsNum = argsNum;
    setArgsNumIsSet(true);
    return this;
  }

  public void unsetArgsNum() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARGSNUM_ISSET_ID);
  }

  /** Returns true if field argsNum is set (has been assigned a value) and false otherwise */
  public boolean isSetArgsNum() {
    return EncodingUtils.testBit(__isset_bitfield, __ARGSNUM_ISSET_ID);
  }

  public void setArgsNumIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARGSNUM_ISSET_ID, value);
  }

  public int getArgsTypeSize() {
    return (this.argsType == null) ? 0 : this.argsType.size();
  }

  public java.util.Iterator<String> getArgsTypeIterator() {
    return (this.argsType == null) ? null : this.argsType.iterator();
  }

  public void addToArgsType(String elem) {
    if (this.argsType == null) {
      this.argsType = new ArrayList<String>();
    }
    this.argsType.add(elem);
  }

  public List<String> getArgsType() {
    return this.argsType;
  }

  public BizMethodInfo setArgsType(List<String> argsType) {
    this.argsType = argsType;
    return this;
  }

  public void unsetArgsType() {
    this.argsType = null;
  }

  /** Returns true if field argsType is set (has been assigned a value) and false otherwise */
  public boolean isSetArgsType() {
    return this.argsType != null;
  }

  public void setArgsTypeIsSet(boolean value) {
    if (!value) {
      this.argsType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case ARGS_NUM:
      if (value == null) {
        unsetArgsNum();
      } else {
        setArgsNum((Byte)value);
      }
      break;

    case ARGS_TYPE:
      if (value == null) {
        unsetArgsType();
      } else {
        setArgsType((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case ARGS_NUM:
      return Byte.valueOf(getArgsNum());

    case ARGS_TYPE:
      return getArgsType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case ARGS_NUM:
      return isSetArgsNum();
    case ARGS_TYPE:
      return isSetArgsType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BizMethodInfo)
      return this.equals((BizMethodInfo)that);
    return false;
  }

  public boolean equals(BizMethodInfo that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_argsNum = true;
    boolean that_present_argsNum = true;
    if (this_present_argsNum || that_present_argsNum) {
      if (!(this_present_argsNum && that_present_argsNum))
        return false;
      if (this.argsNum != that.argsNum)
        return false;
    }

    boolean this_present_argsType = true && this.isSetArgsType();
    boolean that_present_argsType = true && that.isSetArgsType();
    if (this_present_argsType || that_present_argsType) {
      if (!(this_present_argsType && that_present_argsType))
        return false;
      if (!this.argsType.equals(that.argsType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(BizMethodInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgsNum()).compareTo(other.isSetArgsNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgsNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argsNum, other.argsNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArgsType()).compareTo(other.isSetArgsType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArgsType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.argsType, other.argsType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BizMethodInfo(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("argsNum:");
    sb.append(this.argsNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("argsType:");
    if (this.argsType == null) {
      sb.append("null");
    } else {
      sb.append(this.argsType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BizMethodInfoStandardSchemeFactory implements SchemeFactory {
    public BizMethodInfoStandardScheme getScheme() {
      return new BizMethodInfoStandardScheme();
    }
  }

  private static class BizMethodInfoStandardScheme extends StandardScheme<BizMethodInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BizMethodInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ARGS_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.argsNum = iprot.readByte();
              struct.setArgsNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ARGS_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.argsType = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2;
                  _elem2 = iprot.readString();
                  struct.argsType.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setArgsTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BizMethodInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ARGS_NUM_FIELD_DESC);
      oprot.writeByte(struct.argsNum);
      oprot.writeFieldEnd();
      if (struct.argsType != null) {
        oprot.writeFieldBegin(ARGS_TYPE_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.argsType.size()));
          for (String _iter3 : struct.argsType)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BizMethodInfoTupleSchemeFactory implements SchemeFactory {
    public BizMethodInfoTupleScheme getScheme() {
      return new BizMethodInfoTupleScheme();
    }
  }

  private static class BizMethodInfoTupleScheme extends TupleScheme<BizMethodInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BizMethodInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetArgsNum()) {
        optionals.set(1);
      }
      if (struct.isSetArgsType()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetArgsNum()) {
        oprot.writeByte(struct.argsNum);
      }
      if (struct.isSetArgsType()) {
        {
          oprot.writeI32(struct.argsType.size());
          for (String _iter4 : struct.argsType)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BizMethodInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.argsNum = iprot.readByte();
        struct.setArgsNumIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.argsType = new ArrayList<String>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            String _elem7;
            _elem7 = iprot.readString();
            struct.argsType.add(_elem7);
          }
        }
        struct.setArgsTypeIsSet(true);
      }
    }
  }

}

